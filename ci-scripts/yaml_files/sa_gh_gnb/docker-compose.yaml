services:
  nv-cubb:
    container_name: nv-cubb
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities:
                - gpu
    network_mode: host
    shm_size: 4096m
    privileged: true
    stdin_open: true
    tty: true
    volumes:
      - /lib/modules:/lib/modules
      - /dev/hugepages:/dev/hugepages
      - /usr/src:/usr/src
      - ./aerial_l1_entrypoint.sh:/opt/nvidia/cuBB/aerial_l1_entrypoint.sh
      - /var/log/aerial:/var/log/aerial
      - ../../../cmake_targets/share:/opt/cuBB/share
    userns_mode: host
    ipc: "shareable"
    image: cubb-build:24-1
    depends_on:
      oai-amf:
        condition: service_healthy
    environment:
      - cuBB_SDK=/opt/nvidia/cuBB
    command: bash -c "sudo rm -rf /tmp/phy.log && sudo chmod +x /opt/nvidia/cuBB/aerial_l1_entrypoint.sh && /opt/nvidia/cuBB/aerial_l1_entrypoint.sh"
    healthcheck:
      test: ["CMD-SHELL",'grep -q "L1 is ready!" /tmp/phy.log && echo 0 || echo 1']
      interval: 20s
      timeout: 5s
      retries: 5
  c_oai-gnb-aerial:
    image: oai-gnb-aerial:2024.w21.ARC1.5
    depends_on:
      nv-cubb:
        condition: service_healthy
    privileged: true
    ipc: "container:nv-cubb"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities:
                - gpu
    network_mode: host
    shm_size: 4096m
    stdin_open: true
    tty: true
    volumes:
      - /lib/modules:/lib/modules
      - /dev/hugepages:/dev/hugepages
      - /usr/src:/usr/src
      - ~/share:/opt/nvidia/cuBB/share
      - /var/log/aerial:/var/log/aerial
      # Use this for CBRS radios
      #- ../../../targets/PROJECTS/GENERIC-NR-5GC/CONF/gnb-vnf.sa.cbrs.aerial.conf:/opt/oai-gnb/etc/gnb.conf
      - ../../../targets/PROJECTS/GENERIC-NR-5GC/CONF/gnb-vnf.sa.band78.273prb.aerial.conf:/opt/oai-gnb/etc/gnb.conf
    container_name: c_oai-gnb-aerial
    command: bash -c "chrt -r 1 taskset -c 11-16 chrt -f 95 /opt/oai-gnb/bin/nr-softmodem -O /opt/oai-gnb/etc/gnb.conf | tee /var/log/aerial/oai.log"
      #cpuset: 11-18
    healthcheck:
      test: /bin/bash -c "ps aux | grep -v grep | grep -c softmodem"
      interval: 10s
      timeout: 5s
      retries: 5
  mysql:
      container_name: "mysql"
      image: mysql:8.0
      volumes:
          - ./database/oai_db.sql:/docker-entrypoint-initdb.d/oai_db.sql
          - ./healthscripts/mysql-healthcheck.sh:/tmp/mysql-healthcheck.sh
      environment:
          - TZ=UTC
          - MYSQL_DATABASE=oai_db
          - MYSQL_USER=test
          - MYSQL_PASSWORD=test
          - MYSQL_ROOT_PASSWORD=linux
      healthcheck:
          test: /bin/bash -c "/tmp/mysql-healthcheck.sh"
          interval: 5s
          timeout: 2s
          retries: 10
      networks:
          public_net:
              ipv4_address: 192.168.70.131

  ims:
      container_name: "asterisk-ims"
      image: andrius/asterisk:latest
      volumes:
          - ./conf/sip.conf:/etc/asterisk/sip.conf
          - ./conf/users.conf:/etc/asterisk/users.conf
      healthcheck:
          test: /bin/bash -c "pgrep asterisk"
          interval: 5s
          timeout: 2s
          retries: 10
      networks:
          public_net:
              ipv4_address: 192.168.70.139
  oai-udr:
      container_name: "oai-udr"
      image: oai-udr:develop
      expose:
          - 80/tcp
          - 8080/tcp
      volumes:
          - ./conf/config.yaml:/openair-udr/etc/config.yaml
      environment:
          - TZ=UTC
      depends_on:
          - mysql
          - oai-nrf
      networks:
          public_net:
              ipv4_address: 192.168.70.136
  oai-udm:
      container_name: "oai-udm"
      image: oai-udm:develop
      expose:
          - 80/tcp
          - 8080/tcp
      volumes:
          - ./conf/config.yaml:/openair-udm/etc/config.yaml
      environment:
          - TZ=UTC
      depends_on:
          - oai-udr
      networks:
          public_net:
              ipv4_address: 192.168.70.137
  oai-ausf:
      container_name: "oai-ausf"
      image: oai-ausf:develop
      expose:
          - 80/tcp
          - 8080/tcp
      volumes:
          - ./conf/config.yaml:/openair-ausf/etc/config.yaml
      environment:
          - TZ=UTC
      depends_on:
          - oai-udm
      networks:
          public_net:
              ipv4_address: 192.168.70.138
  oai-nrf:
      container_name: "oai-nrf"
      image: oai-nrf:develop
      expose:
          - 80/tcp
          - 8080/tcp
      volumes:
          - ./conf/config.yaml:/openair-nrf/etc/config.yaml
      environment:
          - TZ=UTC
      networks:
          public_net:
              ipv4_address: 192.168.70.130
  oai-amf:
      container_name: "oai-amf"
      image: oai-amf:develop
      expose:
          - 80/tcp
          - 8080/tcp
          - 38412/sctp
      volumes:
          - ./conf/config.yaml:/openair-amf/etc/config.yaml
      environment:
          - TZ=UTC
      depends_on:
          - mysql
          - oai-nrf
          - oai-ausf
      networks:
          public_net:
              ipv4_address: 192.168.70.132
  oai-smf:
      container_name: "oai-smf"
      image: oai-smf:develop
      expose:
          - 80/tcp
          - 8080/tcp
          - 8805/udp
      volumes:
          - ./conf/config.yaml:/openair-smf/etc/config.yaml
      environment:
          - TZ=UTC
      depends_on:
          - oai-nrf
          - oai-amf
      networks:
          public_net:
              ipv4_address: 192.168.70.133
  oai-upf:
        container_name: "oai-upf"
        image: oai-upf:develop
        expose:
            - 2152/udp
            - 8805/udp
        volumes:
          #- ./conf/basic_nrf_config.yaml:/openair-upf/etc/config.yaml
            - ./conf/config.yaml:/openair-upf/etc/config.yaml
        environment:
            - TZ=UTC
        depends_on:
            - oai-nrf
            - oai-smf
        cap_add:
            - NET_ADMIN
            - SYS_ADMIN
        cap_drop:
            - ALL
        privileged: true
        networks:
            public_net:
                ipv4_address: 192.168.70.134
  oai-ext-dn:
      privileged: true
      init: true
      container_name: oai-ext-dn
      image: trf-gen-cn5g:latest
      entrypoint: /bin/bash -c \
            "ip route add 12.1.0.0/16 via 192.168.70.134 dev eth0; ip route; sleep infinity"
      command: ["/bin/bash", "-c", "trap : SIGTERM SIGINT; sleep infinity & wait"]
      healthcheck:
          test: /bin/bash -c "ip r | grep 12.1.0"
          interval: 5s
          timeout: 2s
          retries: 10
      networks:
          public_net:
              ipv4_address: 192.168.70.135
networks:
    public_net:
        driver: bridge
        name: demo-oai-public-net
        ipam:
            config:
                - subnet: 192.168.70.128/26
        driver_opts:
            com.docker.network.bridge.name: "demo-oai"
