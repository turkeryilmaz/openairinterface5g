#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

// Template Jenkins Declarative Pipeline script to run Test w/ RF HW

// Location of the python executor node shall be in the same subnet as the others servers
def pythonExecutor = params.pythonExecutor

// Location of the test XML file to be run
def testXMLFile = params.pythonTestXmlFile
def mainPythonAllXmlFiles = ""
def buildStageStatus = true

// Name of the test stage
def testStageName = params.pipelineTestStageName

def lockResources = []
if (params.LockResources != null && params.LockResources.trim().length() > 0)
  params.LockResources.trim().split(",").each{lockResources += [resource: it.trim()]}

// Terminate Status
def termENB = 0
def termStatusArray = new Boolean[termENB + 1]
termStatusArray[termENB] = false

// Global Parameters. Normally they should be populated when the master job
// triggers the slave job with parameters
def eNB_Repository
def eNB_Branch
def eNB_CommitID
def eNB_AllowMergeRequestProcess = false
def eNB_TargetBranch

def doEpcLogCollection = true



pipeline {
    agent {
        label pythonExecutor
    }
    options {
        ansiColor('xterm')
        lock(extra: lockResources)
    }

    stages {
        stage("Build Init") {
            steps {
                // update the build name and description
                buildName "${params.eNB_MR}"
                buildDescription "Branch : ${params.eNB_Branch}"
            }
        }
        stage ("Verify Parameters") {
            steps {
                script {
                    echo '\u2705 \u001B[32mVerify Parameters\u001B[0m'
                    def allParametersPresent = true

                    // It is already to late to check it
                    if (params.pythonExecutor != null) {
                        echo "eNB CI executor node  :   ${pythonExecutor}"
                    }
                    // If not present picking a default Stage Name
                    if (params.pipelineTestStageName == null) {
                        // picking default
                        testStageName = 'Template Test Stage'
                    }

                    if (params.LockResources == null) {
                      echo "no LockResources given"
                      allParametersPresent = false
                    }
                    if (params.eNB_IPAddress == null) {
                        allParametersPresent = false
                    }
                    if (params.eNB_SourceCodePath == null) {
                        allParametersPresent = false
                    }
                    if (params.eNB_Credentials == null) {
                        allParametersPresent = false
                    }
                    // the following 4 parameters should be pushed by the master trigger
                    // if not present, take the job GIT variables (used for developing)
                    if (params.eNB_Repository == null) {
                        eNB_Repository = env.GIT_URL
                    } else {
                        eNB_Repository = params.eNB_Repository
                    }
                    echo "eNB_Repository        :   ${eNB_Repository}"
                    if (params.eNB_Branch == null) {
                        eNB_Branch = env.GIT_BRANCH
                    } else {
                        eNB_Branch = params.eNB_Branch
                    }
                    echo "eNB_Branch            :   ${eNB_Branch}"
                    if (params.eNB_CommitID == null) {
                        eNB_CommitID = env.GIT_COMMIT
                    } else {
                        eNB_CommitID = params.eNB_CommitID
                    }
                    echo "eNB_CommitID          :   ${eNB_CommitID}"
                    if (params.eNB_mergeRequest != null) {
                        eNB_AllowMergeRequestProcess = params.eNB_mergeRequest
                        if (eNB_AllowMergeRequestProcess) {
                            if (params.eNB_TargetBranch != null) {
                                eNB_TargetBranch = params.eNB_TargetBranch
                            } else {
                                eNB_TargetBranch = 'develop'
                            }
                            echo "eNB_TargetBranch      :   ${eNB_TargetBranch}"
                        }
                    }

                    if (allParametersPresent) {
                        echo "All parameters are present"
                        if (eNB_AllowMergeRequestProcess) {
                            sh "git fetch"
                            sh "./ci-scripts/doGitLabMerge.sh --src-branch ${eNB_Branch} --src-commit ${eNB_CommitID} --target-branch ${eNB_TargetBranch} --target-commit latest"
                        } else {
                            sh "git fetch"
                            sh "git checkout -f ${eNB_CommitID}"
                        }
                    } else {
                        currentBuild.result = 'ABORTED'
                        error('Stopping early because some parameters are missing')
                    }
                }
            }
        }
        stage ("Build and Test") {
            steps {
                script {
                    dir ('ci-scripts') {
                        echo "\u2705 \u001B[32m${testStageName}\u001B[0m"
                        // If not present picking a default XML file
                        if (params.pythonTestXmlFile == null) {
                            // picking default
                            testXMLFile = 'xml_files/enb_usrpB210_band7_50PRB.xml'
                            echo "Test XML file(default):   ${testXMLFile}"
                            mainPythonAllXmlFiles += "--XMLTestFile=" + testXMLFile + " "
                        } else {
                            String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                            for (xmlFile in myXmlTestSuite) {
                                if (fileExists(xmlFile)) {
                                    mainPythonAllXmlFiles += "--XMLTestFile=" + xmlFile + " "
                                    echo "Test XML file         :   ${xmlFile}"
                                } else {
                                    echo "Test XML file ${xmlFile}: no such file"
                                }
                            }
                        }
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.eNB_Credentials}", usernameVariable: 'eNB_Username', passwordVariable: 'eNB_Password'],
                        ]) {
                            sh "python3 main.py --mode=InitiateHtml --ranRepository=${eNB_Repository} --ranBranch=${eNB_Branch} --ranCommitID=${eNB_CommitID} --ranAllowMerge=${eNB_AllowMergeRequestProcess} --ranTargetBranch=${eNB_TargetBranch} ${mainPythonAllXmlFiles}"
                            String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                            for (xmlFile in myXmlTestSuite) {
                            if (fileExists(xmlFile)) {
                                try {
                                  timeout (time: 60, unit: 'MINUTES') {
                                    sh "python3 main.py --mode=TesteNB --ranRepository=${eNB_Repository} --ranBranch=${eNB_Branch} --ranCommitID=${eNB_CommitID} --ranAllowMerge=${eNB_AllowMergeRequestProcess} --ranTargetBranch=${eNB_TargetBranch} --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password} --eNBSourceCodePath=${params.eNB_SourceCodePath} --XMLTestFile=${xmlFile}"
                                  }
                                } catch (Exception e) {
                                    currentBuild.result = 'FAILURE'
                                    buildStageStatus = false
                                }
                            }
                            }
                            sh "python3 main.py --mode=FinalizeHtml --finalStatus=${buildStageStatus} --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password}"
                        }
                    }
                }
            }
        }
        stage ("Terminate") {
            parallel {
                stage('Terminate eNB') {
                    steps {
                        echo '\u2705 \u001B[32mTerminate eNB\u001B[0m'
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.eNB_Credentials}", usernameVariable: 'eNB_Username', passwordVariable: 'eNB_Password']
                        ]) {
                            sh "python3 ci-scripts/main.py --mode=TerminateeNB --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password}"
                        }
                    }
                    post {
                        success {
                            script {
                                termStatusArray[termENB] = true
                            }
                        }
                    }
                }
            }
        }
        stage('Log Collection') {
            parallel {
                stage('Log Collection (eNB - Run)') {
                    steps {
                        withCredentials([
                             [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.eNB_Credentials}", usernameVariable: 'eNB_Username', passwordVariable: 'eNB_Password']
                        ]) {
                            echo '\u2705 \u001B[32mLog Collection (eNB - Run)\u001B[0m'
                            sh "python3 ci-scripts/main.py --mode=LogCollecteNB --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password} --eNBSourceCodePath=${params.eNB_SourceCodePath} --BuildId=${env.BUILD_ID}"

                            echo '\u2705 \u001B[32mLog Transfer (eNB - Run)\u001B[0m'
                            sh "sshpass -p \'${eNB_Password}\' scp -o 'StrictHostKeyChecking no' -o 'ConnectTimeout 10' ${eNB_Username}@${params.eNB_IPAddress}:${eNB_SourceCodePath}/cmake_targets/enb.log.zip ./enb.log.${env.BUILD_ID}.zip || true"
                        }
                        script {
                            if(fileExists("enb.log.${env.BUILD_ID}.zip")) {
                                archiveArtifacts "enb.log.${env.BUILD_ID}.zip"
                            }
                            if(fileExists("ci-scripts/test_results.html")) {
                                sh "mv ci-scripts/test_results.html test_results-${JOB_NAME}.html"
                                sh "sed -i -e 's#TEMPLATE_JOB_NAME#${JOB_NAME}#' -e 's@build #TEMPLATE_BUILD_ID@build #${BUILD_ID}@' -e 's#Build-ID: TEMPLATE_BUILD_ID#Build-ID: <a href=\"${BUILD_URL}\">${BUILD_ID}</a>#' -e 's#TEMPLATE_STAGE_NAME#${testStageName}#' test_results-${JOB_NAME}.html"
                                archiveArtifacts "test_results-${JOB_NAME}.html"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (params.pipelineZipsConsoleLog != null) {
                    if (params.pipelineZipsConsoleLog) {
                        echo "Archiving Jenkins console log"
                        sh "wget --no-check-certificate --no-proxy ${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_ID}/consoleText -O consoleText.log || true"
                        sh "zip -m consoleText.log.${env.BUILD_ID}.zip consoleText.log || true"
                        if(fileExists("consoleText.log.${env.BUILD_ID}.zip")) {
                            archiveArtifacts "consoleText.log.${env.BUILD_ID}.zip"
                        }
                    }
                }
            }
        }
        // Making sure that we really shutdown every thing before leaving
        failure {
            script {
                if (!termStatusArray[termENB]) {
                    withCredentials([
                        [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.eNB_Credentials}", usernameVariable: 'eNB_Username', passwordVariable: 'eNB_Password']
                    ]) {
                        sh "python3 ci-scripts/main.py --mode=TerminateeNB --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password}"
                    }
                }
            }
        }
    }
}
